name: Deploy to Production Server

on:
  push:
    branches:
      - main  # or master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv sync --all-extras
          uv pip list
      
      - name: Create test settings file
        run: |
          cat > test_settings.py << 'EOF'
          SECRET_KEY = "test_key"
          DATABASE_URL = "sqlite://"
          EOF
      
      - name: Run tests
        env:
          RUN_MODE: test
        run: |
          uv run python -m pytest tests/ -v

  deploy:
    needs: test
    if: success()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USERNAME: ${{ secrets.SERVER_USERNAME }}
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Disable strict host key checking
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          
          # Deploy to server
          ssh $USERNAME@$HOST "
            cd pfa &&
            git pull origin main &&
            ~/.local/bin/uv sync --frozen &&
            echo \"SECRET_KEY = '$SECRET_KEY'\" > local_settings.py &&
            echo \"DATABASE_URL = 'postgresql://$DB_USER:$DB_PASSWORD@localhost/$DB_NAME'\" >> local_settings.py &&
            echo \"$SUDO_PASSWORD\" | sudo -S cp ./deploy/configs/systemd/myapp.service /etc/systemd/system/myapp.service &&
            echo \"$SUDO_PASSWORD\" | sudo -S systemctl daemon-reload &&
            if [ -d /etc/nginx/sites-available ]; then \
              echo \"$SUDO_PASSWORD\" | sudo -S cp ./deploy/configs/nginx/myapp.conf /etc/nginx/sites-available/myapp && \
              echo \"$SUDO_PASSWORD\" | sudo -S ln -sf /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp && \
              echo \"$SUDO_PASSWORD\" | sudo -S rm -f /etc/nginx/sites-enabled/default ; \
            else \
              echo \"$SUDO_PASSWORD\" | sudo -S cp ./deploy/configs/nginx/myapp.conf /etc/nginx/conf.d/myapp.conf ; \
            fi &&
            echo \"$SUDO_PASSWORD\" | sudo -S nginx -t && echo \"$SUDO_PASSWORD\" | sudo -S systemctl reload nginx &&
            ~/.local/bin/uv run sh migrate_db.sh &&
            echo \"$SUDO_PASSWORD\" | sudo -S systemctl restart myapp
          "

